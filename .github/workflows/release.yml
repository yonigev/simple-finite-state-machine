name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
env:
  VERSION: v${{ github.event.inputs.version }}
  SEMVER_VERSION: ${{ github.event.inputs.version }}
  JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
  JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
  JRELEASER_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_SONATYPE_PASSWORD }}
  JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME }}
  JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
jobs:
  publish_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: build statemachine-core
        run: ./gradlew statemachine-core:build

      - name: create publication for statemachine-core
        run: ./gradlew statemachine-core:publish -Pversion=${{ env.SEMVER_VERSION }}

      - name: Deploy to Maven Central
        run: ./gradlew statemachine-core:jreleaserDeploy -Pversion=${{ env.SEMVER_VERSION }}
  

  create_release:
    needs: publish_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Tag latest commit with new version
        id: tag_commit
        run: |
          git config --global user.email "${{ secrets.AUTHOR_EMAIL }}"
          git config --global user.name "${{ secrets.AUTHOR_NAME }}"
          git tag -a "${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push origin --tags

      - name: Verify tag exists
        run: |
          git fetch --tags
          if ! git rev-parse "${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag $VERSION does not exist."
            exit 1
          fi

      - name: Create draft GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.VERSION }} \
            --title "Release ${{ env.VERSION }}" \
            --notes-from-tag \
            --draft

      - name: Upload release artifacts
        env:
          ARTIFACTS_ZIP: ${{ vars.CORE_DEPLOYMENTS_PATH }}/${{ vars.GROUP }}-${{ vars.CORE_ARTIFACT_ID }}-${{ env.SEMVER_VERSION }}-bundle.zip
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ${{ env.ARTIFACTS_ZIP }}
          pwd
          ls
          ls statemachine-core/build
          ls statemachine-core/build/jreleaser
          ls statemachine-core/build/jreleaser/deploy
          ls statemachine-core/build/jreleaser/deploy/mavenCentral
          gh release upload ${{ env.VERSION }} ${{ env.ARTIFACTS_ZIP }} 
